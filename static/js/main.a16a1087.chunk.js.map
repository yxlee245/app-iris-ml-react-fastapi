{"version":3,"sources":["components/TopAppBar.js","utils/index.js","components/ModelSelectBar.js","components/ModelTypeDisplay.js","components/InputSlider.js","components/InputSliders.js","components/Prediction.js","components/InferenceArea.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","TopAppBar","classes","Container","maxWidth","className","AppBar","position","Toolbar","Typography","variant","align","MODEL_TYPE_MAP","logreg","knn","rf","gbm","FIELD_NAME_MAP","sepalLengthCm","sepalWidthCm","petalLengthCm","petalWidthCm","formControl","margin","minWidth","selectEmpty","marginTop","ModelSelectBar","state","setState","FormControl","fullWidth","InputLabel","htmlFor","NativeSelect","value","modelType","inputProps","name","onChange","event","target","ModelType","PrettoSlider","withStyles","color","height","thumb","width","backgroundColor","border","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","InputSlider","fieldName","gutterBottom","valueLabelDisplay","aria-label","defaultValue","min","max","step","InputSliders","Object","entries","map","i","Prediction","useState","predictedClass","probabilities","prediction","setPrediction","useEffect","a","axios","post","model_type","sepal_length_cm","sepal_width_cm","petal_length_cm","petal_width_cm","data","fetchPrediction","irisClass","prob","toFixed","paper","padding","textAlign","palette","text","secondary","InferenceArea","Grid","container","item","xs","Paper","App","ModelTypeDisplay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a16a1087.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst TopAppBar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth='xl' className={classes.root}>\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <Typography\r\n                        variant='h4'\r\n                        className={classes.title}\r\n                        align='left'\r\n                    >\r\n                        Predicting Iris Species with Machine Learning\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default TopAppBar;","export const MODEL_TYPE_MAP = {\r\n    logreg: 'Logistic Regression',\r\n    knn: 'K-Nearest Neighbor',\r\n    rf: 'Random Forest',\r\n    gbm: 'Gradient Boosting'\r\n}\r\n\r\nexport const FIELD_NAME_MAP = {\r\n    sepalLengthCm: 'Sepal Length (cm)',\r\n    sepalWidthCm: 'Sepal Width (cm)',\r\n    petalLengthCm: 'Petal Length (cm)',\r\n    petalWidthCm: 'Petal Width (cm)'\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    InputLabel, Container, FormControl, NativeSelect\r\n} from '@material-ui/core';\r\nimport { MODEL_TYPE_MAP } from '../utils/index'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst ModelSelectBar = ({ state, setState }) => {\r\n    const classes = useStyles();\r\n\r\n    const changeHandler = (event) => {\r\n        setState({\r\n            ...state,\r\n            modelType: event.target.value\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth='xl' >\r\n            <FormControl fullWidth className={classes.formControl}>\r\n                <InputLabel htmlFor='age-native-simple'>Model Type</InputLabel>\r\n                <NativeSelect\r\n                    value={state.modelType}\r\n                    inputProps={{\r\n                        name: 'modelType'\r\n                    }}\r\n                    onChange={changeHandler}\r\n                >\r\n                    <option value='logreg'>{MODEL_TYPE_MAP.logreg}</option>\r\n                    <option value='knn'>{MODEL_TYPE_MAP.knn}</option>\r\n                    <option value='rf'>{MODEL_TYPE_MAP.rf}</option>\r\n                    <option value='gbm'>{MODEL_TYPE_MAP.gbm}</option>\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default ModelSelectBar;","import React from 'react';\r\nimport { Container, Typography } from '@material-ui/core';\r\nimport { MODEL_TYPE_MAP } from '../utils/index';\r\n\r\nconst ModelType = ({ state }) => {\r\n\r\n    return (\r\n        <Container maxWidth='xl'>\r\n            <Typography variant='h5' align='left'>\r\n                Currently predicting using {MODEL_TYPE_MAP[state.modelType]}\r\n            </Typography>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default ModelType;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Slider, Typography } from '@material-ui/core';\r\nimport { FIELD_NAME_MAP } from '../utils/index';\r\n\r\nconst PrettoSlider = withStyles({\r\n    root: {\r\n        color: '#52af77',\r\n        height: 8,\r\n    },\r\n    thumb: {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: '#fff',\r\n        border: '2px solid currentColor',\r\n        marginTop: -8,\r\n        marginLeft: -12,\r\n        '&:focus, &:hover, &$active': {\r\n            boxShadow: 'inherit',\r\n        },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n        left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n    rail: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n})(Slider);\r\n\r\nconst InputSlider = ({ state, setState, fieldName }) => {\r\n\r\n    const changeHandler = (event, value) => {\r\n        setState({\r\n            ...state,\r\n            [fieldName]: value\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography align='left' gutterBottom>\r\n                {FIELD_NAME_MAP[fieldName]}\r\n            </Typography>\r\n            <PrettoSlider\r\n                valueLabelDisplay='auto'\r\n                aria-label='pretto slider'\r\n                defaultValue={5.0}\r\n                min={0.1}\r\n                max={10.0}\r\n                step={0.1}\r\n                onChange={changeHandler}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InputSlider;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\nimport { FIELD_NAME_MAP } from '../utils/index';\r\nimport InputSlider from './InputSlider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 300 + theme.spacing(3) * 2,\r\n    },\r\n    margin: {\r\n        height: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst InputSliders = ({ state, setState }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.root} maxWidth='xl'>\r\n            {\r\n                Object.entries(FIELD_NAME_MAP).map(([fieldName,], i) => {\r\n                    return (\r\n                        <div key={`slider${i}`}>\r\n                            <InputSlider\r\n                                state={state}\r\n                                setState={setState}\r\n                                fieldName={fieldName}\r\n                            />\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default InputSliders;","import React, { useState, useEffect } from 'react';\r\nimport { Container, Typography } from '@material-ui/core';\r\nimport axios from 'axios';\r\n\r\nconst Prediction = ({ state }) => {\r\n    const [prediction, setPrediction] = useState({\r\n        predictedClass: '',\r\n        probabilities: { '': 0.0 }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchPrediction = async () => {\r\n            const { data } = await axios.post(\r\n                '/api/predict',\r\n                {\r\n                    model_type: state.modelType,\r\n                    sepal_length_cm: state.sepalLengthCm,\r\n                    sepal_width_cm: state.sepalWidthCm,\r\n                    petal_length_cm: state.petalLengthCm,\r\n                    petal_width_cm: state.petalWidthCm\r\n                }\r\n            )\r\n            setPrediction(data);\r\n        };\r\n        fetchPrediction();\r\n    }, [state]);\r\n\r\n    return (\r\n        <Container maxWidth='xl'>\r\n            <Typography align='left'>\r\n                Most likely class: {prediction.predictedClass}\r\n            </Typography>\r\n            <Typography align='left'>Probabilities:</Typography>\r\n            <Typography align='left'>\r\n                {\r\n                    Object.entries(prediction.probabilities)\r\n                        .map(([irisClass, prob], i) => {\r\n                            return (\r\n                                <div key={`predict${i}`}>\r\n                                    {irisClass}: {prob.toFixed(3)}\r\n                                </div>\r\n                            );\r\n                        })\r\n                }\r\n            </Typography>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default Prediction;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid } from '@material-ui/core';\r\nimport InputSliders from './InputSliders';\r\nimport Prediction from './Prediction';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nconst InferenceArea = ({ state, setState }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={8}>\r\n                    <Paper className={classes.paper}>\r\n                        <InputSliders state={state} setState={setState} />\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Paper className={classes.paper}>\r\n                        <Prediction state={state} />\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InferenceArea;","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport TopAppBar from './components/TopAppBar';\r\nimport ModelSelectBar from './components/ModelSelectBar';\r\nimport ModelTypeDisplay from './components/ModelTypeDisplay';\r\nimport InferenceArea from './components/InferenceArea';\r\n\r\nfunction App() {\r\n\r\n  const [state, setState] = useState({\r\n    modelType: 'logreg',\r\n    sepalLengthCm: 5.0,\r\n    sepalWidthCm: 5.0,\r\n    petalLengthCm: 5.0,\r\n    petalWidthCm: 5.0\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TopAppBar />\r\n      <ModelTypeDisplay state={state} />\r\n      <ModelSelectBar state={state} setState={setState} />\r\n      <InferenceArea state={state} setState={setState} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}